// Each #kernel tells which function to compile; you can have many kernels

#pragma kernel UpdateParticle
#pragma kernel Deposit
#pragma kernel DiffuseTrail
#pragma kernel DecayTrail
#pragma kernel Clean

#include "UnityCG.cginc"
#include "../../Shader/Common.cginc"
#define THREAD_NUM 8
#define MAX_SENSOR_NUM 9

float _Size;
float _SenseDistance;
//float4x4 _SenseLeftMat;
//float4x4 _SenseRightMat;
//float4x4 _TurnLeftMat;
//float4x4 _TurnRightMat;
float4x4 _SenseMat[MAX_SENSOR_NUM];
float4x4 _TurnMat[MAX_SENSOR_NUM];
int _SensorCount;
float _Speed;
float _DepositRate;
float _DiffuseRate;
float _DecayRate;
float _DeltaTime;
int _TrailResolution;
int _ParticleCount;

RWStructuredBuffer<ParticleInfo> ParticleInfoBuffer;
RWTexture3D<float4> TrailRead;
RWTexture3D<float4> TrailWrite;
RWTexture3D<float4> DepositTex;

// Step I : Sense the Density From the Trail Map
// Step II: Rotate base on the Trail Map
// Step III: Move the particle
[numthreads(THREAD_NUM,1,1)]
void UpdateParticle(uint3 id : SV_DispatchThreadID)
{
    float3 pos        = ParticleInfoBuffer[id.x].pos;
    float3 vel        = normalize(ParticleInfoBuffer[id.x].vel);

    float3 sensorPos[MAX_SENSOR_NUM];
    sensorPos[0] = vel * _SenseDistance + pos;
    
    for ( int i = 1 ; i < _SensorCount+1; ++ i )
    {
        sensorPos[i] = mul(_SenseMat[i-1] , vel ) * _SenseDistance + pos;
        sensorPos[i] = RepeatPosition(sensorPos[i], _Size );
    }
    //float3 posForward = vel * _SenseDistance + pos ;
    //float3 posLeft    = mul(_SenseLeftMat, vel ) * _SenseDistance + pos;
    //float3 posRight   = mul(_SenseRightMat, vel ) * _SenseDistance + pos;

    //posForward = RepeatPosition( posForward , _Size );
    //posLeft = RepeatPosition( posLeft , _Size );
    //posRight = RepeatPosition( posRight , _Size );

    // Step I : sense the density
    float densityArray[MAX_SENSOR_NUM];


    for ( int k = 0 ; k < _SensorCount+1; ++ k)
    { 
        uint3 mID = GetTextureID( sensorPos[k] , _Size , _TrailResolution);
        densityArray[k] = TrailRead[mID];
        
    }
    
    //Determine the rotation
    // find the min and max density;
    int minInd =0;
    int maxInd = 0 ;
    for( int t = 1 ; t < _SensorCount+1; ++ t )
    {
        if ( densityArray[minInd] > densityArray[t])
            minInd = t;
        if ( densityArray[maxInd] < densityArray[t])
            maxInd = t;
    }

    if ( minInd == 0 ) // turn randomly
    {
        int turnID = ( floor(rand(pos + id.x * 2 ) * _SensorCount) % _SensorCount ) ;
        vel = mul( _TurnMat[turnID] , vel );
    }else{
        vel = mul( _TurnMat[maxInd-1] , vel );
    }


    vel = normalize(vel);

    pos += vel * _Speed * _DeltaTime;
    pos = RepeatPosition( pos , _Size );
    ParticleInfoBuffer[id.x].pos = pos;
    ParticleInfoBuffer[id.x].vel = vel;
}

[numthreads(THREAD_NUM,THREAD_NUM,THREAD_NUM)]
void Clean(uint3 id : SV_DispatchThreadID)
{
    DepositTex[id.xyz] = float4(0,0,0,0);

}

// Step IV : Deposit from the particle to the trail
[numthreads(THREAD_NUM,1,1)]
void Deposit(uint3 id : SV_DispatchThreadID)
{
    float3 pos = ParticleInfoBuffer[id.x].pos;

    uint3 pID = GetTextureID(pos, _Size, _TrailResolution);

    DepositTex[pID.xyz] = _DepositRate * _DeltaTime;

} 

//// Step IV : Deposit from the particle to the trail
//[numthreads(THREAD_NUM,THREAD_NUM,1)]
//void Deposit(uint3 id : SV_DispatchThreadID)
//{
//    float den = TrailRead[id.xy];
//    for ( int i = 0 ; i < _ParticleCount ; ++ i )
//    {
//        float3 pos = ParticleInfoBuffer[i].pos;
//        uint3 pID = GetTextureID(pos, _Size , _TrailResolution);

//        if ( pID.x == id.x && pID.y == id.y )
//        {
//            den += _DepositRate * _DeltaTime;
//        }
//    }
//    TrailWrite[id.xy] = den;
//}

// Step V : Diffuse To the Neighbour
[numthreads(THREAD_NUM,THREAD_NUM,THREAD_NUM)]
void DiffuseTrail(uint3 id : SV_DispatchThreadID)
{

    float4 den = TrailRead[id.xyz];
    float4 depositDen = DepositTex[id.xyz];

    //get the deposit from last step
    den += depositDen;

    den *= ( 1 - _DiffuseRate * 27 );
    for( int i = -1 ; i <= 1 ; ++i )
    {
        for( int j = -1 ; j <= 1 ; ++ j )
        {
            for( int k = -1 ; k <= 1 ; ++ k )
            {
                uint3 target = id;
                target.x = (target.x + i + _TrailResolution) % _TrailResolution;
                target.y = (target.y + j + _TrailResolution) % _TrailResolution;
                target.z = (target.z + k + _TrailResolution) % _TrailResolution;

                den += TrailRead[target.xyz] * _DiffuseRate;
            }
        }
    }

    TrailWrite[id.xyz] = den;
}

// Step VI : Decay the Trail
[numthreads(THREAD_NUM,THREAD_NUM,THREAD_NUM)]
void DecayTrail(uint3 id : SV_DispatchThreadID)
{
    float4 den = TrailRead[id.xyz];

    den *= lerp( 1.0 , _DecayRate , _DeltaTime) ;
    TrailWrite[id.xyz] = den;
}