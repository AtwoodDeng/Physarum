// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitParticle
#define PARTICLE_THREAD_NUM 32 
#define INIT_RAND_NUM 30

#include "../../Shader/Common.cginc"

RWStructuredBuffer<ParticleInfo> ParticleInfoBuffer;
Texture2D<float4> InitTexture;
float4 textInitData[INIT_RAND_NUM];

float4 _InitTexSize;

float randSeed = 2;
   
int _InitType; // 0 for random; 2 for init with texture 

float _Size;

[numthreads(PARTICLE_THREAD_NUM,1,1)]
void InitParticle(uint3 id : SV_DispatchThreadID)
{
    
   if ( _InitType == 0 )
   {
       ParticleInfoBuffer[id.x].pos = float3( rand2(id.x) * 2.0 * _Size - float2(1,1) * _Size , 0 );
       ParticleInfoBuffer[id.x].vel = normalize(float3(rand2( id.x * 2 ) * 2 - float2(1,1) , 0 ));
   } else if ( _InitType == 1 ) // init with texture 
   {
       int i,j;
       float4 PosibilityHistogram[INIT_RAND_NUM];
       float PosibilityCounter = 0;

       ParticleInfoBuffer[id.x].vel = normalize(float3(rand2(id.x * 2 ) * 2 - float2(1,1) , 0 ));

       // randomly pick INIT_RAND_NUM points, and pick one based on the posibility
       for ( i = 0 ; i < INIT_RAND_NUM; ++ i )
       { 
           float2 uv = rand2( ( id.x + INIT_RAND_NUM * i ) + randSeed );
           uint2 texUV = round(uv * _InitTexSize.xy );
           PosibilityCounter += InitTexture[texUV].r;
           PosibilityHistogram[i].z = PosibilityCounter;
           PosibilityHistogram[i].xy = uv; 
       }

       float randNum = rand( id.x );

       for ( i = 0 ; i < INIT_RAND_NUM; ++ i )
       {
            if ( randNum < PosibilityHistogram[i].z / PosibilityCounter )
            {
                float2 uv = PosibilityHistogram[i].xy;
                ParticleInfoBuffer[id.x].pos = float3( ( uv - 0.5 ) * 2.0 * _Size , 0 ) ; 

                break;
            }
       }

   }
}

